{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/festivalReducer.js","redux/reducers/festToRespondReducer.js","redux/reducers/bandInfoReducer.js","redux/reducers/festivalBandInfoReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/festivalSaga.js","redux/sagas/bandInfoSaga.js","redux/sagas/festivalBandInfoSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/Time/Time.js","components/UserNav/UserNav.js","components/AboutPage/AboutPage.js","components/ConfirmDeleteFestival/ConfirmDeleteFestival.js","components/FestivalItem/FestivalItem.js","components/FestivalsList/FestivalsList.js","components/UserPage/UserPage.js","components/AddSnackBar/AddSnackBar.js","components/FestivalDetail/FestivalDetail.js","components/UppyModalWithButton/UppyModalWithButton.js","components/EditBandInfo/EditBandInfo.js","components/CurrentBandInfo/CurrentBandInfo.js","components/BandInfoForm/BandInfoForm.js","components/ConfirmDeleteRespondent/ConfirmDeleteRespondent.js","components/FestivalRespondentItem/FestivalRespondentItem.js","components/EditFestival/EditFestival.js","components/FestivalRespondents/FestivalRespondents.js","components/CreateFestForm/CreateFestForm.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","festivalReducer","festivalToRespond","bandInfoReducer","festivalBandInfoReducer","Object","toConsumableArray","rootReducer","errors","user","festivals","festToRespond","band_info","festivalRespondents","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","fetchAllFestivals","createFestival","deleteFestival","updateFestival","festivalResponse","festivalSaga","elementResponse","call","festivalSaga_marked","festivalSaga_marked2","delete","concat","festivalSaga_marked3","_context4","id","_marked4","_context5","_marked5","_context6","_marked6","fetchBandInfo","addBandInfo","updateBandInfo","bandInfoSaga","bandInfoSaga_marked","bandInfoSaga_marked2","bandInfoSaga_marked3","bandInfoSaga_marked4","fetchFestRespondents","addFestivalBandInfo","deleteRespondent","festivalBandInfoSaga","festivalBandInfoSaga_marked","festivalBandInfoSaga_marked2","festival_id","festivalBandInfoSaga_marked3","festivalBandInfoSaga_marked4","rootSaga","all","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","Fragment","components_LogOutButton_LogOutButton","Footer","Time","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","refresh","setInterval","setState","previousState","target","href","rel","moment","format","Component","components_Time_Time","AboutPage","style","width","fontSize","Transition","Slide_default","assign","direction","ConfirmDeleteFestival","open","handleClickOpen","handleClose","_this2","Button_default","size","variant","color","DeleteRounded_default","Dialog_default","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","festival","FestivalItem","classes","Card_default","card","CardContent_default","Typography_default","gutterBottom","name","countDown","date","fromNow","src","image","height","alt","pos","address","CardActions_default","buttons","button","respondToFestival","reviewFestival","components_ConfirmDeleteFestival_ConfirmDeleteFestival","withStyles","marginTop","minWidth","maxWidth","maxHeight","textAlign","marginBottom","margin","icon","FestivalsList","history","push","festId","map","components_FestivalItem_FestivalItem","key","display","flexDirection","flexWrap","justifyContent","withRouter","UserPage","logout","first_name","components_FestivalsList_FestivalsList","AddSnackBar","vertical","horizontal","handleClick","objectSpread","_this$state","value","buttonText","Snackbar_default","anchorOrigin","autoHideDuration","ContentProps","message","IconButton_default","aria-label","Close_default","React","FestivalDetail","tech_rider","band_rider","stage_plot","input_list","arrival_time","requests","notes","band_info_id","handleChangeFor","propertyName","event","defineProperty","handleSubmit","preventDefault","window","scrollTo","fest","DoneAll_default","onSubmit","TextField_default","required","onChange","label","components_AddSnackBar_AddSnackBar","UppyModalWithButton","modalOpen","uppy","Uppy","restrictions","maxNumberOfFiles","autoProceed","componentDidMount","use","XHRUpload","endpoint","on","result","url","successful","handleUploadInput","handleOpen","_uppy_react","closeModalOnClickOutside","onRequestClose","plugins","EditBandInfo","property","updateState","handleUploadInputFor","uploadURL","center","editButton","Modal_default","paper","index_es","components_UppyModalWithButton_UppyModalWithButton","actionButtons","autoFocus","theme","backgroundColor","position","top","left","transform","spacing","unit","palette","background","boxShadow","shadows","padding","CurrentBandInfo","techRiderEndsWith","endsWith","bandRiderEndsWith","stagePlotEndsWith","inputListEndsWith","components_EditBandInfo_EditBandInfo","download","GetApp_default","BandInfoForm","person_id","components_CurrentBandInfo_CurrentBandInfo","ConfirmDeleteRespondent","respondent","FestivalRespondentItem","TableRow_default","row","hover","TableCell_default","title","td","components_ConfirmDeleteRespondent_ConfirmDeleteRespondent","&:nth-of-type(odd)","EditFestival","fullScreen","withMobileDialog","CustomTableCell","head","common","black","white","body","TableCell","FestivalRespondents","components_EditFestival_EditFestival","Paper_default","root","Table_default","table","TableHead_default","TableBody_default","components_FestivalRespondentItem_FestivalRespondentItem","overflowX","CreateFestForm","LoginPage","username","password","login","handleInputChangeFor","role","RegisterPage","last_name","email","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","render","components_LoginPage_LoginPage","components_RegisterPage_RegisterPage","App","HashRouter","components_Nav_Nav","components_UserNav_UserNav","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0e57ef96.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","// set festivals array to whatever information comes back from database\nconst festivalReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_FESTIVALS':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\n\nexport default festivalReducer;\n\n","// set festival to respond object to festival clicked on DOM\nconst festivalToRespond = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_FESTIVAL_TO_RESPOND':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default festivalToRespond;","// set band information object to whatever comes back from the database for that users band info\nconst bandInfoReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_BAND_INFO':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\n\nexport default bandInfoReducer;","// set festival respondents array to whatever information comes back from the database\nconst festivalBandInfoReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_RESPONDENTS':\n            return [...action.payload];\n        default:\n            return state;\n    }\n};\n\n\nexport default festivalBandInfoReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport festivals from './festivalReducer';\nimport festToRespond from './festToRespondReducer';\nimport band_info from './bandInfoReducer';\nimport festivalRespondents from './festivalBandInfoReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  festivals,\n  festToRespond,\n  band_info,\n  festivalRespondents,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest, call } from 'redux-saga/effects';\n// for axios requests\nimport axios from 'axios';\n\n// handles getting all festivals from database for home page on DOM\nfunction* fetchAllFestivals(action) {\n    try {\n        // get any festivals in the database\n        const elementResponse = yield call(axios.get, '/api/festival');\n        yield put({type: 'SET_FESTIVALS', payload: elementResponse.data});\n    } catch (error) {\n        console.log('Error getting festivals', error);\n    }\n}\n\n// handles creation of a new festival\nfunction* createFestival(action) {\n    try {\n        // post new festival to database\n        yield call(axios.post, '/api/festival', action.payload);\n    } catch (error) {\n        console.log('Error creating new festival', error);\n    }\n}\n\n// handles deletion of festival\nfunction* deleteFestival(action) {\n    try {\n        // find festival by id and delete it from database\n        yield call(axios.delete, `/api/festival/${action.payload}`);\n        // refreshes DOM with current festivals\n        yield put({type: 'FETCH_ALL_FESTIVALS'});\n    } catch (error) {\n        console.log('Error deleting festival');\n    }\n}\n\n// handles updating a festival's information\nfunction* updateFestival(action) {\n    try {\n        // finds festival by id and sets info to user input\n        yield call(axios.put, `/api/festival/${action.payload.id}`, action.payload);\n        // refreshes DOM with updated festival information\n        yield put({type: 'FETCH_ALL_FESTIVALS'});\n    } catch (error) {\n        console.log('Error updating festival', error);\n    }\n}\n\n// handles update of redux state when a user clicks on a specific festival\nfunction* festivalResponse(action) {\n    let festivalToRespond = action.payload;\n    try {\n        // set festToRespond to whatever festival user clicked on\n        yield put({type: 'SET_FESTIVAL_TO_RESPOND', payload: festivalToRespond});\n    } catch (error) {\n        console.log('Error getting festival for response', error);\n    }\n}\n\n// handles incoming actions and directs them to the appropriate generator function\nfunction* festivalSaga() {\n    yield takeLatest('FETCH_ALL_FESTIVALS', fetchAllFestivals);\n    yield takeLatest('FESTIVAL_RESPONSE', festivalResponse);\n    yield takeLatest('CREATE_FESTIVAL', createFestival);\n    yield takeLatest('DELETE_FESTIVAL', deleteFestival);\n    yield takeLatest('UPDATE_FESTIVAL', updateFestival);\n  }\n  \n  export default festivalSaga;","import { put, takeLatest, call } from 'redux-saga/effects';\n// to make axios calls\nimport axios from 'axios';\n\n// handles axios call to database for a users band information\nfunction* fetchBandInfo(action) {\n    try {\n        const elementResponse = yield call(axios.get, `/api/band`, {id: action.payload} );\n        // upon receiving a response from the database, dispatch action to set the user's \n        // band info to the response from database\n        yield put({type: 'SET_BAND_INFO', payload: elementResponse.data});\n    } catch (error) {\n        console.log('Error getting band info', error);\n    }\n}\n\n// handles a new user adding band information\nfunction* addBandInfo(action) {\n    try {\n        // axios post with new information\n        yield call(axios.post, '/api/band', action.payload);\n        // fetch and set user's band info so it is immediately available\n        yield put({type: 'FETCH_BAND_INFO'});\n    } catch (error) {\n        console.log('Error posting new band info', error);\n    }\n}\n\n// handles any updates to a user's band information\nfunction* updateBandInfo(action) {\n    try {\n        // find user's band info by id and then set information to whatever user input on DOM\n        yield call(axios.put, `/api/band/${action.payload.id}`, action.payload);\n        // fetch and set band info so updated info is available immediately\n        yield put({type: 'FETCH_BAND_INFO'});\n    } catch (error) {\n        console.log('Error updating band information', error);\n    }\n}\n\n// handles incoming actions and directs them to the appropriate generator function\nfunction* bandInfoSaga() {\n    yield takeLatest('FETCH_BAND_INFO', fetchBandInfo);\n    yield takeLatest('ADD_BAND_INFO', addBandInfo);\n    yield takeLatest('UPDATE_BAND_INFO', updateBandInfo);\n}\n\n\nexport default bandInfoSaga;","import { put, takeLatest, call } from 'redux-saga/effects';\n// for axios requests\nimport axios from 'axios';\n\n// handles fetching festival respondents\nfunction* fetchFestRespondents(action) { \n    try {\n        // get any rows from fest band info table that have the specific clicked festival id\n        const elementResponse = yield call(axios.get, `/api/fest_band_info/${action.payload}` );\n        // dispatch action to set the respondents to the response from the database\n        yield put({type: 'SET_RESPONDENTS', payload: elementResponse.data});\n    } catch (error) {\n        console.log('Error getting band info', error);\n    }\n}\n\n// handles a respondent RSVPing to a festival\nfunction* addFestivalBandInfo(action) {\n    try {\n        // posts users information to fest band info table\n        yield call(axios.post, '/api/fest_band_info', action.payload);\n        // yield put({type: 'FETCH_BAND_INFO'});\n    } catch (error) {\n        console.log('Error posting new fest_band_info', error);\n    }\n}\n\n// handles deleting a festival respondent\nfunction* deleteRespondent(action) {\n    try {\n        // find respondent by id and delete them from table\n        yield call(axios.delete, `/api/fest_band_info/delete/${action.payload.id}`);\n        // refreshes list of respondents\n        yield put({type: 'FETCH_FEST_RESPONDENTS', payload: action.payload.festival_id});\n    } catch (error) {\n        console.log('Error deleting festival respondent', error);\n    }\n}\n\n// handles incoming actions and directs them to the appropriate generator function\nfunction* festivalBandInfoSaga() {\n    yield takeLatest('FETCH_FEST_RESPONDENTS', fetchFestRespondents);\n    yield takeLatest('ADD_RESPONSE', addFestivalBandInfo);\n    yield takeLatest('DELETE_RESPONDENT', deleteRespondent);\n}\n\n\n  \nexport default festivalBandInfoSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport festivalSaga from './festivalSaga';\nimport bandInfoSaga from './bandInfoSaga';\nimport festivalBandInfoSaga from './festivalBandInfoSaga';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    festivalSaga(),\n    bandInfoSaga(),\n    festivalBandInfoSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">Festival Form</h2>\n    </Link>\n    <div className=\"nav-right\">\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'Home' : 'Login / Register'}\n      </Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          {/* <Link className=\"nav-link\" to=\"/info\">\n            Info Page\n          </Link> */}\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link>\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css';\nimport { Link } from 'react-router-dom';\n\n\nfunction Footer() {\n\n  return (\n    <>\n    {/* links to all user pages */}\n      <footer className=\"footer\">\n        <span className=\"span\" id=\"span\">\n          <Link to=\"/home\">\n            Home\n          </Link>\n        </span>\n        <span className=\"span\">\n          <Link to=\"/info\">\n            Info\n          </Link>\n        </span>\n        <span className=\"span\"> \n          <Link to=\"/about\">\n            About\n          </Link>\n        </span>\n        <span className=\"span\">\n          <Link to=\"/tourinfo\">\n            My Tour Info\n          </Link>\n        </span>\n      </footer>\n    </>\n  );\n}\n\n\nexport default Footer;\n","import React, { Component } from 'react';\n// handles time format\nimport moment from 'moment';\n\nclass Time extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      refresh: true \n    };\n\n    // Toggle the state every 30 seconds\n    setInterval(() => {\n      this.setState(previousState => {\n        return { refresh: !previousState.refresh };\n      });\n    }, 30000);\n  }\n\n  render() {\n    return (\n      <div className=\"nav-right\">\n        <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" rel=\"noopener noreferrer\">{moment().format('MMMM Do YYYY, h:mm a')}</a>\n      </div>\n    );\n  }\n}\n\nexport default Time;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Time from '../Time/Time';\n\nconst UserNav = (props) => (\n  <div className=\"nav\">\n    <div>\n      {/* only display admin links if user id is 1 (me) */}\n      {props.user.id === 1 && (\n        <div>\n          <Link className=\"nav-link\" to=\"/adminhome\">\n            Admin Home\n          </Link>\n          <Link className=\"nav-link\" to=\"/createfest\">\n            Create Festival\n          </Link>\n        </div>\n      )}\n    </div>\n    <Link to=\"/home\">\n    </Link>\n    <div>\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'Home' : 'Login / Register'}\n      </Link>\n      {/* Show the link to the tour info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/tourinfo\">\n            My Tour Info\n          </Link>\n        </>\n      )}\n      <div>\n        {/* display current time component whether user is logged in or not */}\n        <Time />\n      </div>\n    </div>\n  </div>\n);\n\n\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links\n\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(UserNav);\n","import React from 'react';\n\n// this is a very simple component with some text\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <form style={{width: 500, fontSize: 24}}>\n      <p>\n      Miscommunication and lost emails are common and a source of great frustration in the world of professional live concert production. \n      Festival Form  was developed to help streamline communication between music festival organizers and band tour managers to create well-organized festivals. \n      Band tour managers are able to upload their current information and RSVP to music festivals. \n      Music festival organizers can create festivals, see who has responded to each festival, and download each respondents information.\n      </p>\n      </form>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React, { Component } from 'react';\n// material-ui imports\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n// icon import\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\n\n// makes pop up slide up from bottom\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nclass ConfirmDeleteFestival extends Component {\n  // define state, set dialog box open property to false\n  state = {\n    open: false,\n  };\n\n  // sets state of open to true (opens dialog box)\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  }; // end handleClickOpen\n\n  // sets state of open to false (closes dialog box)\n  handleClose = () => {\n    this.setState({ open: false });\n  }; // end handleClose\n\n\n  render() {\n    \n    return (\n      <div>\n        {/* button with delete icon */}\n        <Button \n          onClick={this.handleClickOpen} \n          size=\"large\" \n          variant=\"outlined\" \n          color=\"secondary\" \n        >\n          <DeleteRoundedIcon />\n        </Button>\n        <Dialog\n          open={this.state.open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          {/* dialog box content */}\n          <DialogTitle id=\"alert-dialog-slide-title\">\n            {\"Delete festival?\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Delete this festival? This action cannot be undone.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            {/* run delete festival function on confirm delete (in FestivalsList component) */}\n            <Button onClick={() => this.props.deleteFestival(this.props.festival.id)} color=\"secondary\">\n              Delete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default ConfirmDeleteFestival;","import React, { Component } from 'react';\n// moment.js to format dates and times\nimport moment from 'moment';\n// material-ui imports\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n// import to handle delete\nimport ConfirmDeleteFestival from '../ConfirmDeleteFestival/ConfirmDeleteFestival';\n\n// jss styles\nconst styles = {\n    card: {\n        marginTop: 75,\n        minWidth: 275,\n        maxWidth: 400,\n        maxHeight: 600,\n        textAlign: 'center',\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    countDown: {\n        textAlign: 'center',\n        color: 'CornflowerBlue',\n        margin: 10,\n    },\n    icon: {\n        margin: 2,\n        fontSize: 32,\n        textAlign: 'right',\n    },\n    buttons: {\n        width: 400,\n        margin: 'auto',\n    },\n    button: {\n        margin: 15,\n    },\n};\n\nclass FestivalItem extends Component {\n\n\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                {/* display each festival on it's own card */}\n                <Card className={classes.card} >\n                    <CardContent>\n                        <Typography variant=\"h3\" gutterBottom>\n                            {this.props.festival.name}\n                            <br />\n                        </Typography>\n                        <Typography className={classes.countDown} color=\"textSecondary\" variant=\"h6\">\n                            {/* moment.js formats countdown */}\n                            Happening {moment(this.props.festival.date, \"YYYYMMDD\").fromNow()}\n                        </Typography>\n                        <Typography>\n                            <br />\n                            <img src={this.props.festival.image} height=\"200\" alt=\"Music festival\" />\n                        </Typography>\n                        <br />\n                        <Typography className={classes.pos} color=\"textSecondary\" variant=\"h5\">\n                            {/* moment.js formats date */}\n                            {moment(this.props.festival.date).format('M-DD-YYYY')}\n                            <br />\n                            {this.props.festival.address}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        {\n                            this.props.id === 1 ?\n                                // if logged in user is admin (id=1) show RSVP, Review, and Delete buttons\n                                <div className={classes.buttons}>\n                                    <Button className={classes.button} size=\"large\" variant=\"outlined\" color=\"primary\" onClick={() => this.props.respondToFestival(this.props.festival)}>RSVP</Button>\n                                    <Button className={classes.button} size=\"large\" variant=\"outlined\" onClick={() => this.props.reviewFestival(this.props.festival)}>Review</Button>\n                                    <br />\n                                    <ConfirmDeleteFestival\n                                        deleteFestival={this.props.deleteFestival}\n                                        festival={this.props.festival}\n                                    />\n                                </div>\n                                :\n                                // if logged in user is not admin (id=1), only display RSVP button\n                                <div className={classes.buttons}>\n                                    <Button size=\"large\" variant=\"outlined\" color=\"primary\" onClick={() => this.props.respondToFestival(this.props.festival)}>RSVP</Button>\n                                </div>\n                        }\n                    </CardActions>\n                    <br />\n                    <br />\n                </Card>\n            </div>\n        );\n    }\n}\n\nFestivalItem.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(FestivalItem);","import React, { Component } from 'react';\n// connect to redux\nimport { connect } from 'react-redux';\n// import festival item to return each festival as it's own item\nimport FestivalItem from '../FestivalItem/FestivalItem';\nimport { withRouter } from 'react-router-dom';\n// necessary for jss styles\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\n// jss styles\nconst styles = {\n    card: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        justifyContent: 'space-evenly',\n    },\n};\n\nclass FestivalsList extends Component {\n\n    // gets the info of the festival clicked, the users's band info, then directs user to festival detail view\n    respondToFestival = (festival) => {\n        this.props.dispatch({ type: 'FESTIVAL_RESPONSE', payload: festival });\n        this.props.dispatch({ type: 'FETCH_BAND_INFO', payload: this.props.user.id });\n        this.props.history.push(\"/festivaldetail\")\n    } // end respondToFestival\n\n    // for admin only, gets clicked festival info along with all respondents to the festival, directs admin to fest response view\n    reviewFestival = (festival) => {\n        this.props.dispatch({ type: 'FESTIVAL_RESPONSE', payload: festival });\n        this.props.dispatch({ type: 'FETCH_FEST_RESPONDENTS', payload: festival.id })\n        this.props.history.push(\"/festresponse\")\n    }\n\n    // deletes specific festival, passed through props -> FestivalItem -> ConfirmDeleteFestival\n    deleteFestival = (festId) => {\n        // finds festival by id and removes\n        this.props.dispatch({ type: 'DELETE_FESTIVAL', payload: festId });\n    }\n\n   \n\n\n    render() {\n\n        const { classes } = this.props;\n    \n\n        return (\n            <div>\n                <div className={classes.card}>\n                {/* map returns a component of each festival */}\n                    {this.props.festivals.map(festival => {\n                        return <FestivalItem\n                            id={this.props.id}\n                            key={festival.id}\n                            festival={festival}\n                            respondToFestival={this.respondToFestival}\n                            reviewFestival={this.reviewFestival}\n                            deleteFestival={this.deleteFestival}\n                        />\n                    }\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nFestivalsList.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n// connect to redux state for information\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        festivals: state.festivals,\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(withRouter(FestivalsList)));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport FestivalsList from '../FestivalsList/FestivalsList';\n\nclass UserPage extends Component {\n  logout = () => {\n    this.props.dispatch({ type: 'LOGOUT' });\n  }\n\n  // get users band info and a list of all festivals from the database on home page load\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_ALL_FESTIVALS' });\n    this.props.dispatch({ type: 'FETCH_BAND_INFO', payload: this.props.user.id });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1 id=\"welcome\">\n          Welcome, {this.props.user.first_name}\n        </h1>\n        <br />\n        <hr />\n        {/* display \"active festivals\" if the user is admin (id=1) */}\n        {this.props.user.id === 1 \n          ?\n          <h2 style={{ textAlign: 'center' }} className=\"tagline\">Active Festivals</h2>\n          :\n          <h2 style={{ textAlign: 'center' }} className=\"tagline\">All Festivals</h2>\n        }\n        <hr />\n        {/* list of all festivals on cards */}\n        <FestivalsList\n          id={this.props.user.id}\n        />\n        <br />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the user and festivals info\nconst mapStateToProps = state => ({\n  festivals: state.festivals,\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPage);\n\n","import React from 'react';\n// material-ui imports\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass AddSnackBar extends React.Component {\n  //define state\n  state = {\n    open: false,\n    vertical: 'top',\n    horizontal: 'center',\n  };\n\n  // handles opening of snackbar\n  handleClick = state => () => {\n    this.setState({ open: true, ...state });\n  }; // end handleClick\n\n  // handles close of snackbar\n  handleClose = () => {\n    this.setState({ open: false });\n  }; // end handleClose\n\n  render() {\n    const { vertical, horizontal, open } = this.state;\n    return (\n      <div>\n        <Button\n          type=\"submit\"\n          value=\"Submit\"\n          size=\"medium\"\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={this.handleClick({ vertical: 'top', horizontal: 'center' })}\n        >\n          {this.props.buttonText} {this.props.icon}\n        </Button>\n        <Snackbar\n          anchorOrigin={{ vertical, horizontal }}\n          open={open}\n          autoHideDuration={5000}\n          onClose={this.handleClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{this.props.message}</span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"secondary\"\n              onClick={this.handleClose}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AddSnackBar;","import React, { Component } from 'react';\n// connect to redux\nimport { connect } from 'react-redux';\n// import moment.js to handle times and dates\nimport moment from 'moment';\n// material-ui imports\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\n// use snackbar component for form submission\nimport AddSnackBar from '../AddSnackBar/AddSnackBar';\n\n// jss styles\nconst styles = {\n    card: {\n        marginTop: 30,\n        margin: 'auto',\n        minWidth: 300,\n        maxWidth: 600,\n        textAlign: 'center',\n        marginBottom: 70,\n    },\n};\n\nclass FestivalDetail extends Component {\n    // define state\n    state = {\n        festivals: [],\n        response: {\n            // set festival response to the users current band information\n            name: this.props.band_info.name,\n            tech_rider: this.props.band_info.tech_rider,\n            band_rider: this.props.band_info.band_rider,\n            stage_plot: this.props.band_info.stage_plot,\n            input_list: this.props.band_info.input_list,\n            // user enters these on the page\n            arrival_time: '',\n            requests: '',\n            notes: '',\n            // send festival id and band info id so individual \n            // bands can be called back to specific festivals\n            festival_id: this.props.festToRespond.id,\n            band_info_id: this.props.band_info.id,\n        }\n    }\n\n    // scroll the window back to the top of the page\n    componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n\n    // handle changes in inputs, curried function\n    handleChangeFor = propertyName => event => {\n        this.setState({\n            response: {\n                ...this.state.response,\n                [propertyName]: event.target.value\n            }\n\n        });\n    }; // end handleChangeFor\n\n    // handle form submission\n    handleSubmit = (event) => {\n        event.preventDefault(); // prevent refresh\n        // dispatch action to add a response to the specified festival, send along users band info\n        this.props.dispatch({ type: 'ADD_RESPONSE', payload: this.state.response });\n        // reset inputs\n        this.setState({\n            response: {\n                arrival_time: '',\n                requests: '',\n                notes: ''\n            }\n        });\n    }; // end handleSubmit\n\n\n    render() {\n\n        let fest = this.props.festToRespond;\n        const { classes } = this.props;\n        let icon = <DoneAllIcon />\n\n        return (\n            <div>\n                <div>\n                    {/* instructions to user */}\n                    <div className=\"tagline\">\n                        <h1>Festival RSVP</h1>\n                        <p>Please verify that you are responding to the correct festival, then enter your information. Upon clicking RSVP, all of</p>\n                        <p>your current tour information along with your arrival time, notes, and requests will be made visible to the festival promoter.</p>\n                    </div>\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"inputDiv\">\n                            <p className=\"tagline\">Please enter your arrival time and any notes or requests you might have for the festival promoter.</p>\n                            <br />\n                            <label>Arrival Time\n                            <TextField\n                                    type=\"time\"\n                                    variant=\"outlined\"\n                                    required\n                                    value={this.state.response.arrival_time}\n                                    onChange={this.handleChangeFor('arrival_time')}\n                                />\n                            </label>\n                            <br />\n                            <br />\n                            <TextField\n                                type=\"text\"\n                                variant=\"outlined\"\n                                label=\"Notes\"\n                                value={this.state.response.notes}\n                                onChange={this.handleChangeFor('notes')}\n                            />\n                            <br />\n                            <br />\n                            <TextField\n                                type=\"text\"\n                                variant=\"outlined\"\n                                label=\"Requests\"\n                                value={this.state.response.requests}\n                                onChange={this.handleChangeFor('requests')}\n                            />\n                            <br />\n                            <br />\n                            <AddSnackBar\n                                fest={fest}\n                                buttonText=\"RSVP\"\n                                message={\"Success responding to \" + fest.name}\n                                icon={icon}\n                            />\n                        </div>\n                    </form>\n                </div>\n                <div>\n                    {fest.id ?\n                        <div>\n                            {/* card displays which festival they are responding to */}\n                            <Card className={classes.card}>\n                                <CardContent>\n                                    <Typography variant=\"h3\" gutterBottom>\n                                        {fest.name}\n                                        <br />\n                                    </Typography>\n                                    <Typography id=\"countDown\" color=\"textSecondary\" variant=\"h6\">\n                                        {/* countdown to festival, format with moment.js */}\n                                        Happening {moment(fest.date, \"YYYYMMDD\").fromNow()}\n                                    </Typography>\n                                    <Typography>\n                                        <br />\n                                        <img src={fest.image} height=\"300\" alt=\"Music festival\" />\n                                    </Typography>\n                                    <br />\n                                    <Typography color=\"textSecondary\" variant=\"h5\">\n                                        {/* format date with moment.js */}\n                                        {moment(fest.date).format('M-DD-YYYY')}\n                                        <br />\n                                        {fest.address}\n                                        <br />\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </div>\n                        // if there is nothing in festToRespond redux state, show nothing\n                        : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nFestivalDetail.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n// connect to redux state to access information\nconst mapStateToProps = state => {\n    return {\n        state,\n        band_info: state.band_info,\n        festToRespond: state.festToRespond,\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(FestivalDetail));","// import react\nimport React, { Component } from 'react';\n\n// Uppy imports\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { DashboardModal } from '@uppy/react';\nimport './uppy.min.css';\n\n// material-ui imports\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n// styles\nconst styles = {\n\n    button: {\n        margin: 10,\n    },\n};\n\n\nclass UppyModalWithButton extends Component {\n\n    // define state\n    state = {\n        modalOpen: false\n    }\n\n    // create instance of uppy\n    uppy = Uppy({\n        restrictions: { maxNumberOfFiles: 1 },\n        autoProceed: false \n    });\n\n\n    componentDidMount = () => {\n        // use XHRUpload for photo uploads\n        this.uppy.use(XHRUpload, {\n            endpoint: './fileupload'\n        });\n\n        // on completion of upload set url\n        this.uppy.on( 'complete', ( result ) => {\n            let url = 'images/' + result.successful[0].name;\n            // call handleUploadInput and pass it url of new photo upload\n            this.props.handleUploadInput(url);\n        });\n    }\n\n    handleOpen = ( event ) => {\n        // prevent page refresh on click\n        event.preventDefault();\n        // opens uppy modal when set to true\n        this.setState({\n            modalOpen: true\n        });\n    }\n\n    handleClose = () => {\n        // closes uppy modal when set to false\n        this.setState({\n            modalOpen: false\n        });\n    }\n\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                {/* clicking upload image button opens uppy modal */}\n                <Button\n                    variant=\"contained\"\n                    size=\"small\"\n                    onClick={this.handleOpen}\n                    className={classes.button}\n                >\n                    Upload\n                </Button>\n                <DashboardModal\n                    uppy={this.uppy}\n                    // close uppy dashboard modal if click outside of dashboard\n                    closeModalOnClickOutside\n                    // uppy dashboard modal open toggles between true and false\n                    open={this.state.modalOpen}\n                    // closes uppy dashboard modal\n                    onRequestClose={this.handleClose}\n                    plugins={['Webcam']}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\n\nUppyModalWithButton.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(UppyModalWithButton);","import React, { Component } from 'react';\n// connect to redux state\nimport { connect } from 'react-redux';\n// material-ui imports\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n// my uppy component\nimport UppyModalWithButton from '../UppyModalWithButton/UppyModalWithButton';\n\n// jss styles\nconst styles = theme => ({\n  editButton: {\n    width: 200,\n    height: 60,\n    fontSize: 20,\n    backgroundColor: 'CornflowerBlue',\n    color: 'white',\n  },\n  center: {\n    width: 200,\n    margin: 'auto',\n  },\n  paper: {\n    position: 'absolute',\n    top: `50%`,\n    left: `50%`,\n    transform: `translate(-50%, -50%)`,\n    width: theme.spacing.unit * 60,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    textAlign: 'center',\n  },\n  actionButtons: {\n    margin: 10,\n  },\n});\n\nclass EditBandInfo extends Component {\n  // define state and set properties equal to the current band information for that user\n  state = {\n    // modal not open \n    open: false,\n    name: this.props.band_info.name,\n    tech_rider: this.props.band_info.tech_rider,\n    band_rider: this.props.band_info.band_rider,\n    stage_plot: this.props.band_info.stage_plot,\n    input_list: this.props.band_info.input_list,\n    // gets user's id from redux state\n    id: this.props.user.id,\n  };\n\n  // handles input field changes, curried function\n  handleChangeFor = property => event => {\n    this.setState({\n      ...this.state,\n      [property]: event.target.value,\n    });\n  } // end handleChangeFor\n\n  // opens modal to update band information\n  handleClickOpen = () => {\n    // this.props.dispatch({ type: 'FETCH_BAND_INFO', payload: this.props.user.id });\n    this.setState({ open: true });\n  }; // end handleClickOpen\n\n  // closes modal\n  handleClose = () => {\n    this.setState({ open: false });\n  }; // end handleClose\n\n  // handles information update \n  updateState = () => {\n    // dispatch action to update band info with new information\n    this.props.dispatch({ type: 'UPDATE_BAND_INFO', payload: this.state });\n    // close modal\n    this.handleClose();\n  }; // end updateState\n\n  // handle file uploads\n  handleUploadInputFor = (property) => {\n    return (uploadURL) => {\n      this.setState({\n        ...this.state,\n        [property]: uploadURL,\n      })\n    }\n  }; // end handleUploadInputFor\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <div>\n        {/* big blue update info button, opens update modal */}\n        <div className={classes.center}>\n          <Button className={classes.editButton} variant=\"contained\" onClick={this.handleClickOpen}>Edit Tour Information</Button>\n        </div>\n        <Modal\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          {/* modal content */}\n          <div className={classes.paper}>\n            <Typography variant=\"h5\" id=\"modal-title\">\n              Update Tour Information\n          </Typography>\n            <Typography variant=\"subtitle1\">\n              Enter in the current tour information. Clicking update will store all new information.\n            </Typography>\n            <br />\n            <div>\n              <TextField\n                type=\"text\"\n                label=\"Band Name\"\n                value={this.state.name}\n                onChange={this.handleChangeFor('name')}\n              />\n            </div>\n            <br />\n            <div>\n              <TextField\n                  type=\"text\"\n                  label=\"Tech Rider\"\n                  value={this.state.tech_rider}\n                  onChange={this.handleChangeFor('tech_rider')}\n                />\n              {/* bring in uppy component to handle file uploads */}\n              <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('tech_rider')} />\n            </div>\n            <br />\n            <div>\n              <TextField\n                type=\"text\"\n                label=\"Hospitality Rider\"\n                value={this.state.band_rider}\n                onChange={this.handleChangeFor('band_rider')}\n              />\n              <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('band_rider')} />\n            </div>\n            <br />\n            <div>\n              <TextField\n                type=\"text\"\n                label=\"Stage Plot\"\n                value={this.state.stage_plot}\n                onChange={this.handleChangeFor('stage_plot')}\n              />\n              <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('stage_plot')} />\n            </div>\n            <br />\n            <div>\n              <TextField\n                type=\"text\"\n                label=\"Input List\"\n                value={this.state.input_list}\n                onChange={this.handleChangeFor('input_list')}\n              />\n              <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('input_list')} />\n            </div>\n            <br />\n            <Button\n              className={classes.actionButtons}\n              onClick={this.handleClose}\n              color=\"secondary\"\n              size=\"large\"\n              variant=\"outlined\"\n            >\n              Cancel\n            </Button>\n            <Button\n              className={classes.actionButtons}\n              onClick={this.updateState}\n              color=\"primary\"\n              size=\"large\"\n              variant=\"outlined\"\n              autoFocus\n            >\n              Update\n            </Button>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nEditBandInfo.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n// connect to redux state to access information there\nconst mapStateToProps = state => {\n  return {\n    state,\n    band_info: state.band_info,\n    user: state.user,\n  };\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(EditBandInfo));","import React, { Component } from 'react';\n// connect component to redux\nimport { connect } from 'react-redux';\n// my component, displays after initial upload of tour information\nimport EditBandInfo from '../EditBandInfo/EditBandInfo';\n// material-ui imports\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport GetApp from '@material-ui/icons/GetApp';\n\n// jss styles\nconst styles = {\n    card: {\n        margin: 'auto',\n        maxWidth: 700,\n        textAlign: 'center',\n    },\n    icon: {\n        margin: 2,\n        fontSize: 32,\n        color: 'CornflowerBlue',\n    },\n}\n\nclass CurrentBandInfo extends Component {\n\n    // get band info on page load, specific to user, gets info by user's id\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_BAND_INFO', payload: this.props.user.id });\n    }\n\n\n    render() {\n\n        let techRiderCheck = this.props.band_info.tech_rider;\n        let techRiderEndsWith = techRiderCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        let bandRiderCheck = this.props.band_info.band_rider;\n        let bandRiderEndsWith = bandRiderCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        let stagePlotCheck = this.props.band_info.stage_plot;\n        let stagePlotEndsWith = stagePlotCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        let inputListCheck = this.props.band_info.input_list;\n        let inputListEndsWith = inputListCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        const { classes } = this.props;\n\n        return (\n            <>\n                <h2 className=\"tagline\" style={{ margin: 40 }}>Your information is stored! Click the Update Tour Information button to edit.</h2>\n                <EditBandInfo />\n                <br />\n                <br />\n                <div className=\"cardDiv\">\n                    <Card className={classes.card}>\n                        <CardContent>\n                            <Typography variant=\"h4\">\n                                Current Tour Information\n                            </Typography>\n                            <hr />\n                            <br />\n                            <h3>Tech Rider</h3>\n                            {techRiderEndsWith ?\n                                <object data={this.props.band_info.tech_rider} width=\"500\" height=\"400\">\n                                    <p>{this.props.band_info.tech_rider}</p>\n                                </object>\n                                :\n                                <img src={this.props.band_info.tech_rider} width=\"500\" alt={this.props.band_info.tech_rider} />\n                            }\n                            <a href={this.props.band_info.tech_rider} download><GetApp className={classes.icon} /></a>\n                            <br />\n                            <br />\n                            <h3>Hospitality Rider</h3>\n                            {bandRiderEndsWith ?\n                                <object data={this.props.band_info.band_rider} width=\"500\" height=\"400\">\n                                    <p>{this.props.band_info.band_rider}</p>\n                                </object>\n                                :\n                                <img src={this.props.band_info.band_rider} width=\"500\" alt={this.props.band_info.band_rider} />\n                            }\n                            <a href={this.props.band_info.band_rider} download><GetApp className={classes.icon} /></a>\n                            <br />\n                            <br />\n                            <h3>Stage Plot</h3>\n                            {stagePlotEndsWith ?\n                                <object data={this.props.band_info.stage_plot} width=\"500\" height=\"400\">\n                                    <p>{this.props.band_info.stage_plot}</p>\n                                </object>\n                                :\n                                <img src={this.props.band_info.stage_plot} width=\"500\" alt={this.props.band_info.stage_plot} />\n                            }\n                            <a href={this.props.band_info.stage_plot} download><GetApp className={classes.icon} /></a>\n                            <br />\n                            <br />\n                            <h3>Input List</h3>\n                            {inputListEndsWith ?\n                                <object data={this.props.band_info.input_list} width=\"500\" height=\"400\">\n                                    <p>{this.props.band_info.input_list}</p>\n                                </object>\n                                :\n                                <img src={this.props.band_info.input_list} width=\"500\" alt={this.props.band_info.input_list} />\n                            }\n                            <a href={this.props.band_info.input_list} download><GetApp className={classes.icon} /></a>\n                        </CardContent>\n                    </Card>\n                    <br />\n                    <br />\n                    <br />\n                </div>\n            </>\n        );\n    }\n}\n\nCurrentBandInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n// necessary to use information from the redux state\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        band_info: state.band_info,\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(CurrentBandInfo));","import React, { Component } from 'react';\n// connect component to redux\nimport { connect } from 'react-redux';\n// material-ui imports\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n// uppy file uploads\nimport UppyModalWithButton from '../UppyModalWithButton/UppyModalWithButton';\n// current band info for users who have already uploaded the first time\nimport CurrentBandInfo from '../CurrentBandInfo/CurrentBandInfo';\n\n\nclass BandInfoForm extends Component {\n    // define state and create properties to be controlled by inputs on DOM (except for person_id)\n    state = {\n        name: '',\n        tech_rider: '',\n        band_rider: '',\n        stage_plot: '',\n        input_list: '',\n        // gets person_id from redux state\n        person_id: this.props.user.id,\n    }\n\n    // handle changes in inputs on DOM, curried function\n    handleChangeFor = propertyName => event => {\n        this.setState({\n            // only change property name passed in, set to what user types into input\n            ...this.state,\n            [propertyName]: event.target.value\n        });\n    }; // end handleChangeFor\n\n    // handle form submission\n    handleSubmit = (event) => {\n        event.preventDefault(); // stop page refresh\n        // dispatch action to add band info, send state\n        this.props.dispatch({ type: 'ADD_BAND_INFO', payload: this.state });\n        // reset inputs\n        this.setState({\n            state: {\n                name: '',\n                tech_rider: '',\n                band_rider: '',\n                stage_plot: '',\n                input_list: '',\n            }\n        });\n    }; // end handleSubmit\n\n    // handle uppy file uploads, curried function\n    handleUploadInputFor = (property) => {\n        return (uploadURL) => {\n            this.setState({\n                ...this.state,\n                [property]: uploadURL,\n            })\n        }\n    }; // end handleUploadInputFor\n\n    // get band info on page load, specific to user, gets info by user's id\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_BAND_INFO', payload: this.props.user.id });\n    }\n\n    render() {\n        return (\n            <div>\n                {/* if user has previously uploaded band info, show CurrentBandInfo component */}\n                {this.props.band_info.id ?\n                    <CurrentBandInfo />\n                    // if the user has not previously uploaded tour information, show the initial upload form\n                    :\n                    <>\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"inputDiv\">\n                                <h2 className=\"tagline\" style={{ margin: 40 }}>Please upload PDFs or Images of current band information.</h2>\n                                <br />\n                                <TextField\n                                    type=\"text\"\n                                    label=\"Band Name\"\n                                    variant=\"outlined\"\n                                    value={this.state.name}\n                                    onChange={this.handleChangeFor('name')}\n                                />\n                                <br />\n                                <br />\n                                <TextField\n                                    type=\"text\"\n                                    label=\"Tech Rider\"\n                                    variant=\"outlined\"\n                                    value={this.state.tech_rider}\n                                    onChange={this.handleChangeFor('tech_rider')}\n                                />\n                                {/* bring in uppy component to handle file uploads */}\n                                <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('tech_rider')} />\n                                <br />\n                                <br />\n                                <TextField\n                                    type=\"text\"\n                                    label=\"Hospitality Rider\"\n                                    variant=\"outlined\"\n                                    value={this.state.band_rider}\n                                    onChange={this.handleChangeFor('band_rider')}\n                                />\n                                <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('band_rider')} />\n                                <br />\n                                <br />\n                                <TextField\n                                    type=\"text\"\n                                    label=\"Stage Plot\"\n                                    variant=\"outlined\"\n                                    value={this.state.stage_plot}\n                                    onChange={this.handleChangeFor('stage_plot')}\n                                />\n                                <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('stage_plot')} />\n                                <br />\n                                <br />\n                                <TextField\n                                    type=\"text\"\n                                    label=\"Input List\"\n                                    variant=\"outlined\"\n                                    value={this.state.input_list}\n                                    onChange={this.handleChangeFor('input_list')}\n                                />\n                                <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('input_list')} />\n                                <br />\n                                <br />\n                                <Button\n                                    type=\"submit\"\n                                    value=\"Submit\"\n                                    variant=\"outlined\"\n                                    size=\"large\"\n                                    color=\"primary\"\n                                >\n                                    Submit\n                                </Button>\n                            </div>\n                        </form>\n                        <hr />\n                        <br />\n                        <br />\n                        <br />\n                    </>\n                }\n            </div>\n        );\n    }\n}\n\n// necessary to use information from the redux state\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n        band_info: state.band_info,\n    }\n}\n\nexport default connect(mapStateToProps)(BandInfoForm);","import React, { Component } from 'react';\n// material-ui imports\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n// icon import\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\n\n// makes pop up slide up from bottom\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nclass ConfirmDeleteRespondent extends Component {\n  // define state, set dialog box open property to false\n  state = {\n    open: false,\n  };\n\n  // sets state of open to true (opens dialog box)\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  }; // end handleClickOpen\n\n  // sets state of open to false (closes dialog box)\n  handleClose = () => {\n    this.setState({ open: false });\n  }; // end handleClose\n\n\n  render() {\n    \n    return (\n      <div>\n        {/* button with delete icon */}\n        <Button \n          onClick={this.handleClickOpen} \n          size=\"large\" \n          variant=\"outlined\" \n          color=\"secondary\" \n        >\n          <DeleteRoundedIcon />\n        </Button>\n        <Dialog\n          open={this.state.open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n        {/* dialog box content */}\n          <DialogTitle id=\"alert-dialog-slide-title\">\n            {\"Delete respondent?\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Delete this respondent? This action cannot be undone.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            {/* run delete respondent function on confirm delete (in FestivalRepondents component) */}\n            <Button onClick={() => this.props.deleteRespondent(this.props.respondent)} color=\"secondary\">\n              Delete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default ConfirmDeleteRespondent;","import React, { Component } from 'react';\n// moment.js to format dates and times\nimport moment from 'moment';\n// download icon\nimport GetApp from '@material-ui/icons/GetApp';\n// material-ui imports\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n// handles delete of respondent\nimport ConfirmDeleteRespondent from '../ConfirmDeleteRespondent/ConfirmDeleteRespondent';\n\n// jss styles\nconst styles = {\n    icon: {\n        margin: 2,\n        fontSize: 32,\n        color: 'CornflowerBlue',\n    },\n    row: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: 'Gainsboro',\n        },\n    },\n    td: {\n        fontSize: 16,\n        height: 210,\n    },\n    title: {\n        fontSize: 24,\n    }\n};\n\nclass FestivalRespondentItem extends Component {\n\n    render() {\n\n        let respondent = this.props.respondent;\n        const { classes } = this.props;\n\n        let techRiderCheck = respondent.tech_rider;\n        let techRiderEndsWith = techRiderCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        let bandRiderCheck = respondent.band_rider;\n        let bandRiderEndsWith = bandRiderCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        let stagePlotCheck = respondent.stage_plot;\n        let stagePlotEndsWith = stagePlotCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        let inputListCheck = respondent.input_list;\n        let inputListEndsWith = inputListCheck.endsWith(\".pdf\" || \".jpg\" || \".png\" || \".gif\" || \".jpeg\");\n\n        return (\n            // table populates with each respondents info\n            <TableRow className={classes.row} hover>\n                <TableCell className={classes.title}>{respondent.name}</TableCell>\n                <TableCell className={classes.td}>\n                    {techRiderEndsWith ?\n                        <object data={respondent.tech_rider} width=\"250\" height=\"200\">\n                            <p>{respondent.tech_rider}</p>\n                        </object>\n                        :\n                        <img src={respondent.tech_rider} width=\"250\" alt={respondent.tech_rider} />\n                    }\n                    <a href={respondent.tech_rider} download><GetApp className={classes.icon} /></a>\n                </TableCell>\n                <TableCell className={classes.td}>\n                    {bandRiderEndsWith ?\n                        <object data={respondent.band_rider} width=\"250\" height=\"200\">\n                            <p>{respondent.band_rider}</p>\n                        </object>\n                        :\n                        <img src={respondent.band_rider} width=\"250\" alt={respondent.band_rider} />\n                    }\n                    <a href={respondent.band_rider} download><GetApp className={classes.icon} /></a>\n                </TableCell>\n                <TableCell className={classes.td}>\n                    {stagePlotEndsWith ?\n                        <object data={respondent.stage_plot} width=\"250\" height=\"200\">\n                            <p>{respondent.stage_plot}</p>\n                        </object>\n                        :\n                        <img src={respondent.stage_plot} width=\"250\" alt={respondent.stage_plot} />\n                    }\n                    <a href={respondent.stage_plot} download><GetApp className={classes.icon} /></a>\n                </TableCell>\n                <TableCell className={classes.td}>\n                    {inputListEndsWith ?\n                        <object data={respondent.input_list} width=\"250\" height=\"200\">\n                            <p>{respondent.input_list}</p>\n                        </object>\n                        :\n                        <img src={respondent.input_list} width=\"250\" alt={respondent.input_list} />\n                    }\n                    <a href={respondent.input_list} download><GetApp className={classes.icon} /></a>\n                </TableCell>\n                <TableCell className={classes.td}>{moment(respondent.arrival_time, 'hh:mm:ss').format('h:mm A')}</TableCell>\n                <TableCell className={classes.td}>{respondent.notes}</TableCell>\n                <TableCell className={classes.td}>{respondent.requests}</TableCell>\n                <TableCell>\n                    <ConfirmDeleteRespondent\n                        deleteRespondent={this.props.deleteRespondent}\n                        respondent={respondent}\n                    />\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nFestivalRespondentItem.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(FestivalRespondentItem);","import React, { Component } from 'react';\n// material-ui imports\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\nimport TextField from '@material-ui/core/TextField';\n// connect to redux\nimport { connect } from 'react-redux';\n\nclass EditFestival extends Component {\n\n  // define state and set properties equal the current festival information\n  state = {\n    // dialog not open\n    open: false,\n    name: this.props.festToRespond.name,\n    date: this.props.festToRespond.date,\n    address: this.props.festToRespond.address,\n    image: this.props.festToRespond.image,\n    // get clicked festival from redux state\n    id: this.props.festToRespond.id,\n  };\n\n  // handle changes in inputs, curried function\n  handleChangeFor = property => event => {\n    this.setState({\n      ...this.state,\n      [property]: event.target.value,\n    });\n  }; // end handleChangeFor\n\n  // open dialog \n  handleClickOpen = () => {\n    // this.props.dispatch({type: 'FESTIVAL_RESPONSE', payload: this.props.festToRespond});\n    this.setState({ open: true });\n  }; // end handleClickOpen\n\n  // closes dialog\n  handleClose = () => {\n    this.setState({ open: false });\n  }; // end handleClose\n\n  // handles click of update button\n  updateState = () => {\n    // dispatch action to update festival information in database\n    this.props.dispatch({ type: 'UPDATE_FESTIVAL', payload: this.state });\n    // dispatch action to update festival in redux state\n    this.props.dispatch({ type: 'FESTIVAL_RESPONSE', payload: this.state });\n    this.handleClose();\n  } // end updateState\n\n\n  render() {\n\n    const { fullScreen } = this.props;\n\n    return (\n      <div>\n\n        <Button className=\"button\" variant=\"contained\" onClick={this.handleClickOpen}>Edit Festival Information</Button>\n        <Dialog\n          fullScreen={fullScreen}\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n        >\n        {/* dialog content */}\n          <DialogTitle id=\"responsive-dialog-title\">{\"Edit Festival Information\"}</DialogTitle>\n          <DialogContent>\n            <br />\n            <TextField\n              type=\"text\"\n              label=\"Festival Name\"\n              variant=\"outlined\"\n              value={this.state.name}\n              onChange={this.handleChangeFor('name')}\n            />\n            <br />\n            <br />\n            <TextField\n                type=\"date\"\n                label=\"Date\"\n                variant=\"outlined\"\n                value={this.state.date}\n                onChange={this.handleChangeFor('date')}\n              />\n            <br />\n            <br />\n            <TextField\n              type=\"text\"\n              label=\"Address\"\n              variant=\"outlined\"\n              value={this.state.address}\n              onChange={this.handleChangeFor('address')}\n            />\n            <br />\n            <br />\n            <TextField\n              type=\"text\"\n              label=\"Image Url\"\n              variant=\"outlined\"\n              value={this.state.image}\n              onChange={this.handleChangeFor('image')}\n            />\n            <br />\n            <br />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"secondary\">\n              Cancel\n            </Button>\n            <Button onClick={this.updateState} color=\"primary\" autoFocus>\n              Update\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nEditFestival.propTypes = {\n  fullScreen: PropTypes.bool.isRequired,\n};\n\n// connect to redux state to get info of clicked festival\nconst mapStateToProps = state => {\n  return {\n    festToRespond: state.festToRespond,\n  };\n}\n\nexport default connect(mapStateToProps)(withMobileDialog()(EditFestival));","import React, { Component } from 'react';\n// connect to redux\nimport { connect } from 'react-redux';\n// contains individual item of each festival respondent\nimport FestivalRespondentItem from '../FestivalRespondentItem/FestivalRespondentItem';\n// moment.js handles date and time formatting\nimport moment from 'moment';\n// handles updating festival\nimport EditFestival from '../EditFestival/EditFestival';\n// material-ui imports\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// table header is dark\nconst CustomTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n        fontSize: 18,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n// jss styles\nconst styles = {\n    card: {\n        marginTop: 30,\n        margin: 'auto',\n        maxWidth: 1000,\n        textAlign: 'center',\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        justifyContent: 'space-evenly',\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    countDown: {\n        textAlign: 'center',\n        color: 'CornflowerBlue',\n        margin: 10,\n    },\n    root: {\n        width: '100%',\n        marginTop: 10,\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 700,\n        margin: 'auto',\n\n    },\n};\n\nclass FestivalRespondents extends Component {\n\n    // handles delete of respondent\n    deleteRespondent = (respondent) => {\n        // dispatch action to delete a respondent, send clicked respondent\n        this.props.dispatch({ type: 'DELETE_RESPONDENT', payload: respondent });\n    }\n\n    // window scrolls to top on page load\n    componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n\n    render() {\n\n        let fest = this.props.festToRespond;\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <br />\n                {fest.id ?\n                    // show clicked festival on a card\n                    <Card className={classes.card}>\n                        <CardContent>\n                            <Typography variant=\"h3\" gutterBottom>\n                                {fest.name}\n                                <br />\n                            </Typography>\n                            <Typography className={classes.countDown} color=\"textSecondary\" variant=\"h6\">\n                                Happening {moment(fest.date, \"YYYYMMDD\").fromNow()}\n                            </Typography>\n                            <Typography>\n                                <br />\n                                <img src={fest.image} height=\"400\" alt=\"Music festival\" />\n                            </Typography>\n                            <br />\n                            <Typography className={classes.pos} color=\"textSecondary\" variant=\"h5\">\n                                {moment(fest.date).format('M-DD-YYYY')}\n                                <br />\n                                {fest.address}\n                                <br />\n                            </Typography>\n                            <EditFestival />\n                        </CardContent>\n                    </Card>\n                    : null}\n                <br />\n                <hr />\n                <br />\n                <h1 className=\"tagline\">{fest.name} Respondents</h1>\n                <br />\n                {/* festival respondents table */}\n                {this.props.festivalRespondents.length !== 0 ?\n                    <Paper className={classes.root}>\n                        <Table className={classes.table}>\n                            <TableHead>\n                                <TableRow>\n                                    <CustomTableCell>\n                                        Band Name\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Tech Rider\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Hospitality Rider\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Stage Plot\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Input List\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Arrival Time\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Notes\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Requests\n                                    </CustomTableCell>\n                                    <CustomTableCell>\n                                        Remove\n                                    </CustomTableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.props.festivalRespondents.map(respondent => {\n                                    return <FestivalRespondentItem\n                                        key={respondent.id}\n                                        respondent={respondent}\n                                        deleteRespondent={this.deleteRespondent}\n                                    />\n                                }\n                                )}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                    :\n                    // display this if no one has responded to the festival\n                    <h2 className=\"tagline\">No Respondents Yet</h2>}\n                    <br />\n                    <br />\n                    <br />\n            </div>\n        );\n    }\n}\n\nFestivalRespondents.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n// connect to redux state to access information there\nconst mapStateToProps = state => {\n    return {\n        state,\n        festToRespond: state.festToRespond,\n        festivalRespondents: state.festivalRespondents\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(FestivalRespondents));","import React, { Component } from 'react';\n// connect to redux state\nimport { connect } from 'react-redux';\n// material-ui imports\nimport TextField from '@material-ui/core/TextField';\nimport AddSnackBar from '../AddSnackBar/AddSnackBar';\n// uppy file upload\nimport UppyModalWithButton from '../UppyModalWithButton/UppyModalWithButton';\n\n\nclass CreateFestForm extends Component {\n\n    // define state\n    state = {\n        name: '',\n        date: '',\n        address: '',\n        image: '',\n    }\n\n    // handle changes in TextFields (curry)\n    handleChangeFor = propertyName => event => {\n        this.setState({\n            // saves whatever state previously was and only changes current TextField\n            ...this.state,\n            [propertyName]: event.target.value\n        });\n    }; // end handleChangeFor\n\n    // handle form submission\n    handleSubmit = (event) => {\n        // prevent page refresh\n        event.preventDefault();\n        // dispatch CREATE_FESTIVAL action to festivalSaga with the current state\n        this.props.dispatch({ type: 'CREATE_FESTIVAL', payload: this.state });\n        // set inputs back to empty strings\n        this.setState({\n            name: '',\n            date: '',\n            address: '',\n            image: '',\n        });\n    }; // end handleSubmit\n\n    // handle uppy file uploads, curried function\n    handleUploadInputFor = (property) => {\n        return (uploadURL) => {\n            this.setState({\n                ...this.state,\n                [property]: uploadURL,\n            })\n        }\n    }; // end handleUploadInputFor\n\n\n    render() {\n        return (\n            <div className=\"inputDiv\">\n                {/* on pressing enter the form is submitted and festival creation action dispatched */}\n                <form onSubmit={this.handleSubmit}>\n                    <h1 className=\"tagline\">Create New Festival</h1>\n                    <p className=\"tagline\">Please enter some information about this festival.</p>\n                    <br />\n                    {/* text fields handle all admin input when creating a new festival, all fields must be filled to submit the form */}\n                    <TextField\n                        type=\"text\"\n                        label=\"Festival Name\"\n                        variant=\"outlined\"\n                        value={this.state.name}\n                        required\n                        onChange={this.handleChangeFor('name')}\n                    />\n                    <br />\n                    <br />\n                    <TextField\n                        type=\"date\"\n                        variant=\"outlined\"\n                        value={this.state.date}\n                        required\n                        onChange={this.handleChangeFor('date')}\n                    />\n                    <br />\n                    <br />\n                    <TextField\n                        type=\"text\"\n                        label=\"Address\"\n                        variant=\"outlined\"\n                        value={this.state.address}\n                        required\n                        onChange={this.handleChangeFor('address')}\n                    />\n                    <br />\n                    <br />\n                    <TextField\n                        type=\"text\"\n                        label=\"Photo Url or Upload\"\n                        variant=\"outlined\"\n                        value={this.state.image}\n                        required\n                        onChange={this.handleChangeFor('image')}\n                    />\n                    <UppyModalWithButton handleUploadInput={this.handleUploadInputFor('image')} />\n                    <br />\n                    <br />\n                    <br />\n                    <AddSnackBar \n                        buttonText=\"Create Festival\"\n                        message=\"Festival created successfully!\"\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n\n// export\nexport default connect()(CreateFestForm);","import React, { Component } from 'react';\n// connect to redux\nimport { connect } from 'react-redux';\n// material-ui for input\nimport TextField from '@material-ui/core/TextField';\n\nclass LoginPage extends Component {\n  // define state\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault(); // prevent refresh\n\n    // requires the username and password fields to not be empty strings\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  // handles changes in the inputs, curried function\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n              <TextField\n                type=\"text\"\n                variant=\"outlined\"\n                label=\"Username\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <br />\n          <div>\n              <TextField\n                type=\"password\"\n                variant=\"outlined\"\n                label=\"Password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n          </div>\n          <br />\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\n// connect to redux\nimport {connect} from 'react-redux';\n// material-ui\nimport TextField from '@material-ui/core/TextField';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    first_name: '',\n    last_name: '',\n    email: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault(); // prevent page refresh on form submission\n\n    // make sure all inputs have some text \n    if (this.state.username && this.state.password && this.state.first_name && this.state.last_name && this.state.email) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          first_name: this.state.first_name,\n          last_name: this.state.last_name,\n          email: this.state.email,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  // handles changes in the inputs, curried function\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  } // end handleInputChangeFor\n\n  render() {\n    return (\n      <div>\n        {/* error message area */}\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        {/* new user registration form */}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <br />\n          <div>\n              <TextField\n                type=\"text\"\n                label=\"Username\"\n                variant=\"outlined\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <br />\n          <div>\n              <TextField\n                type=\"text\"\n                label=\"First Name\"\n                variant=\"outlined\"\n                name=\"first_name\"\n                value={this.state.first_name}\n                onChange={this.handleInputChangeFor('first_name')}\n              />\n          </div>\n          <br />\n          <div>\n              <TextField\n                type=\"text\"\n                label=\"Last Name\"\n                variant=\"outlined\"\n                name=\"last_name\"\n                value={this.state.last_name}\n                onChange={this.handleInputChangeFor('last_name')}\n              />\n          </div>\n          <br />\n          <div>\n              <TextField\n                type=\"text\"\n                label=\"Email\"\n                variant=\"outlined\"\n                name=\"email\"\n                value={this.state.email}\n                onChange={this.handleInputChangeFor('email')}\n              />\n          </div>\n          <br />\n          <div>\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                variant=\"outlined\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n          </div>\n          <br />\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n        <br />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // takes ComponentToProtect from component prop\n  // grabs all other props and passes them along to route\n  const {\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        render={() => (\n          // if the user is logged in (only logged in users have ids)\n          user.id ?\n          // show the component that is protected\n          <ComponentToProtect /> :\n          // if they are not logged in, check the loginMode on Redux State\n          // if the mode is 'login'\n          loginMode === 'login' ?\n          // show the LoginPage\n          <LoginPage /> :\n          // the the user is not logged in and the mode is not 'login'\n          // show the RegisterPage\n          <RegisterPage />\n        )}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute);","import React, {Component} from 'react';\n\n// routing imports\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\n// connect to redux state\nimport {connect} from 'react-redux';\n\n// my components\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\nimport UserNav from '../UserNav/UserNav';\nimport AboutPage from '../AboutPage/AboutPage';\nimport UserPage from '../UserPage/UserPage';\n// import InfoPage from '../InfoPage/InfoPage';\nimport FestivalDetail from '../FestivalDetail/FestivalDetail';\nimport BandInfoForm from '../BandInfoForm/BandInfoForm';\nimport FestivalRespondents from '../FestivalRespondents/FestivalRespondents';\nimport CreateFestForm from '../CreateFestForm/CreateFestForm';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\n// import styles\nimport './App.css';\n\n\n\n\n\nclass App extends Component {\n\n  // get user info on component load\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <UserNav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={UserPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            {/* <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            /> */}\n            <ProtectedRoute\n              exact\n              path=\"/festivaldetail\"\n              component={FestivalDetail}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/tourinfo\"\n              component={BandInfoForm}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/adminhome\"\n              component={UserPage}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/createfest\"\n              component={CreateFestForm}\n            />\n            <ProtectedRoute \n              exact\n              path=\"/festresponse\"\n              component={FestivalRespondents}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}